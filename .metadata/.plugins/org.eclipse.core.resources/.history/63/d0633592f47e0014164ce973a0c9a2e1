package hr.fer.zemris.optjava.dz6;

import java.io.IOException;

public class TSPSolver {

	private static int iter;
	private static int m;
	private static double ro = 0.2;
	private static double alpha = 1.d;
	private static double beta = 2.5;
	private static double a;
	private static int k;
	
	private static double initPheromoneValue = 0.5;
	private static double upperPheromoneBound = 2.d;
	private static double lowerPheromoneBound = 0.5d;

	private static double[][] pheromoneValues;
	private static double[][] heurValues; 
	
	
	public static void main(String[] args) throws IOException {
		double[][] euclidPositions = DataParser.getEuclidPositions(args[0]);
		k = Integer.valueOf(args[1]);
		m = Integer.valueOf(args[2]);
		iter = Integer.valueOf(args[3]);
		
		int numberOfCities = euclidPositions[0].length;
		a = (double)(k / numberOfCities);
		
		double[][] distances = calculateDistances(euclidPositions);
		heurValues = calculateHeuristicValues(distances);
		pheromoneValues = initializePheromoneValues(numberOfCities);
		int[][] nearestCitiesLists = calculateNearestCities(distances);
		
		RouletteWheel rouletteWheel = new RouletteWheel();
		
		while(iter-- > 0) {
			//repeat for every ant
			double globalShortestPath = distances[0][5] * numberOfCities;	//HAX
			double[] antsDistances = new double[m];
			int[][] currentDirections = new int[m][numberOfCities];
			int[] bestDirections = new int[numberOfCities];
			int stagnationCounter = 0;
			
			for(int i = 0; i < m; i++) {
				//create solution
				int currentCity = (int)Math.round(Math.random() * numberOfCities);
				
				int[] localNearestCitiesList = nearestCitiesLists[i];
				localNearestCitiesList[currentCity] = -1;
				int[] otherCitiesList = getOtherCitiesIndexes(localNearestCitiesList, numberOfCities);
				
				int kCounter = k;
				int numberOfVisited = 0;
				
				//TODO - fix this while and for (merge into one loop)
				while(kCounter-- > 0) {
					//choose from the list of k nearest cities
					//TODO - think about this (method chooseCity()) --- nearestCitiesList needs to be local
					int nextCity = rouletteWheel.chooseCity(alpha, pheromoneValues, heurValues, nearestCitiesLists[i]);
					
					currentDirections[i][numberOfVisited++] = nextCity;
					antsDistances[i] += distances[currentCity][nextCity];
					currentCity = nextCity;
					localNearestCitiesList[nextCity] = -1;	//mark as visited
				}
				//visit the rest of the cities
				for(int j = 0; j < numberOfCities - k; j++) {
					//TODO - think about this (method chooseCity())
					int nextCity = rouletteWheel.chooseCity();
					
					currentDirections[i][numberOfVisited++] = nextCity;
					antsDistances[i] += distances[currentCity][nextCity];
					currentCity = nextCity;
				}
			}
			//decrease pheromone trail
			decreasePheromoneTrail(ro);
			
			//update pheromone trail ("use" only the best ant)
			double currentShortestPath = antsDistances[0];
			int currentBestAnt = 0;
			for(int i = 0; i < m; i++) {
				if(antsDistances[i] < currentShortestPath) {
					currentShortestPath = antsDistances[i];
					currentBestAnt = i;
				}
			}
			
			if(currentShortestPath < globalShortestPath) {
				globalShortestPath = currentShortestPath;
				bestDirections = currentDirections[currentBestAnt];
				stagnationCounter = 0;
			} else {
				if(stagnationCounter++ >= 50) {
					stagnationCounter = 0;
					upperPheromoneBound = 1 / (ro * globalShortestPath);
					lowerPheromoneBound /= a;
				}
			}
			
			//TODO - modify this strategy
			if(Math.random() > 0.5) {
				for (int i = currentDirections[currentBestAnt][0]; i < numberOfCities - 1; i++) {
					pheromoneValues[i][i+1] += 1 / distances[i][i+1];
				}
			} else {
				for (int i = bestDirections[0]; i < numberOfCities - 1; i++) {
					pheromoneValues[i][i+1] = 1 / distances[i][i+1]; 
				}
			}
		}
	}
	
	
	private static double[][] initializePheromoneValues(int numberOfCities) {
		double[][] pheromoneValues = new double[numberOfCities][numberOfCities];
		
		for(int i = 0; i < numberOfCities; i++) {
			for(int j = 0; j < numberOfCities; j++) {
				if(i == j) {
					pheromoneValues[i][j] = 0;
				} else {
					pheromoneValues[i][j] = initPheromoneValue;
				}
			}
		}
		return pheromoneValues;
	}
	
	private static void decreasePheromoneTrail(double ro) {
		for(int i = 0; i < pheromoneValues.length; i++) {
			for(int j = 0; j < pheromoneValues.length; j++) {
				if(i != j) {
					pheromoneValues[i][j] -= ro * pheromoneValues[i][j];
				}
			}
		}
	}
	
	private static double[][] calculateDistances(double[][] p) {
		int length = p.length;
		double[][] distances = new double[length][length];
		
		for(int i = 0; i < length; i++) {
			for(int j = 0; j < length; j++) {
				if(i == j) {
					distances[i][j] = 0;
				} else {
					distances[i][j] = Math.sqrt(Math.pow(p[i][0] - p[j][0], 2) + Math.pow(p[i][1] - p[j][1], 2));
				}
			}
		}
		return distances;
	}
	
	private static double[][] calculateHeuristicValues(double[][] d) {
		int length = d.length;
		double[][] heurValues = new double[length][length];
		
		for(int i = 0; i < length; i++) {
			for(int j = 0; j < length; j++) {
				if(i == j) {
					heurValues[i][j] = 0;
				} else {
					heurValues[i][j] = Math.pow(1 / d[i][j], beta);
				}
			}
		}
		return heurValues;
	}

	private static int[][] calculateNearestCities(double[][] distances) {
		int[][] nearestCitiesLists = new int[distances.length][k];
		
		int[] indexes = new int[k];
		for(int i = 0; i < k; i++) {
			indexes[i] = i;
		}
		
		for(int i = 0; i < distances.length; i++) {
			double[] d = distances[i].clone();
			for(int l = 0; l < d.length-1; l++) {
				for(int n = 1; n < d.length; n++) {
					if(d[l] < d[n]) {
						int temp = indexes[l];
						indexes[l] = indexes[n];
						indexes[n] = temp;
					}
				}
			}
			for(int j = 1; j < k+1; j++) {
				nearestCitiesLists[i][j-1] = indexes[j];
			}
		}
		return nearestCitiesLists;
	}
	
	private static int[] getOtherCitiesIndexes(int[] kCitiesList, int numberOfCities) {
		int[] otherCitiesList = new int[numberOfCities];
		
		//can this be better (this way some values are always not used)
		for(int i = 0; i < numberOfCities; i++) {
			otherCitiesList[i] = i;
		}
		for(int i = 0; i < numberOfCities; i++) {
			otherCitiesList[kCitiesList[i]] = -1;
		}
		return otherCitiesList;
	}

}
